/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 5 "strutil.go"

#include <stdlib.h>

typedef enum {
  CENTER,
  LEFT,
  RIGHT,
} align_t;

typedef struct {
  char* top;
  char* top_right;
  char* right;
  char* bottom_right;
  char* bottom;
  char* bottom_left;
  char* left;
  char* top_left;
} box9_slice_t;

typedef struct {
  char* buffer;
  char* error;
} draw_box_t;

typedef struct {
  char* buffer;
  char* error;
} random_t;

typedef struct {
  char* buffer;
  char* error;
} sub_string_t;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* strutil_align(char* str, align_t align_to, int width);
extern char* strutil_align_center(char* str, int width);
extern char* strutil_align_left(char* str);
extern char* strutil_align_right(char* str, int width);
extern char* strutil_center_text(char* str, int width);
extern int strutil_count_words(char* str);
extern draw_box_t* strutil_draw_box(char* content, int width, align_t align);
extern draw_box_t* strutil_draw_custom_box(char* content, int width, align_t align, box9_slice_t* chars, char* str_new_line);
extern char* strutil_expand_tabs(char* str, int count);
extern char* strutil_indent(char* str, char* left);
extern int strutil_is_ascii(char* s);
extern char* strutil_must_sub_string(char* str, int start, int end);
extern char* strutil_os_new_line();
extern char* strutil_pad(char* str, int width, char* left_pad, char* right_pad);
extern char* strutil_pad_left(char* str, int width, char* pad);
extern char* strutil_pad_right(char* str, int width, char* pad);
extern random_t* strutil_random(char* str_set, int length);
extern char* strutil_remove_accents(char* str);
extern char* strutil_replace_all_to_one(char* str, char** from, int from_length, char* to);
extern char* strutil_reverse(char* s);
extern char* strutil_slugify(char* str);
extern char* strutil_slugify_special(char* str, char* delimiter);
extern char* strutil_splice(char* str, char* new_str, int start, int end);
extern char** strutil_split_camel_case(char* str);
extern sub_string_t* strutil_sub_string(char* str, int start, int end);
extern char* strutil_summary(char* str, int length, char* end);
extern char* strutil_tile(char* pattern, int length);
extern char* strutil_to_camel_case(char* str);
extern char* strutil_to_snake_case(char* str);
extern char* strutil_word_wrap(char* str, int colLen, int break_long_words);
extern char** strutil_words(char* str);
extern box9_slice_t* strutil_default_box9_slice();
extern box9_slice_t* strutil_simple_box9_slice();
extern void box9_slice_clean(box9_slice_t* self);
extern void draw_box_clean(draw_box_t* self);
extern void random_clean(random_t* self);
extern void sub_string_clean(sub_string_t* self);

#ifdef __cplusplus
}
#endif
